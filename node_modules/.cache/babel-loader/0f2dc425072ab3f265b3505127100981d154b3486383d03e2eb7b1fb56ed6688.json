{"ast":null,"code":"export const createImage = url => new Promise((resolve, reject) => {\n  const image = new Image();\n  image.addEventListener('load', () => resolve(image));\n  image.addEventListener('error', error => reject(error));\n  image.setAttribute('crossOrigin', 'anonymous'); // needed to avoid cross-origin issues\n  image.src = url;\n});\nexport default async function getCroppedImg(imageSrc, pixelCrop, rotation = 0, flip = {\n  horizontal: false,\n  vertical: false\n}, outputFormat = 'image/png', outputQuality = 0.92) {\n  const image = await createImage(imageSrc);\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  if (!ctx) {\n    return null;\n  }\n  const rotRad = getRadianAngle(rotation);\n\n  // calculate bounding box of the rotated image\n  const {\n    width: bBoxWidth,\n    height: bBoxHeight\n  } = rotateSize(image.width, image.height, rotation);\n\n  // set canvas size to match the bounding box\n  canvas.width = bBoxWidth;\n  canvas.height = bBoxHeight;\n\n  // translate canvas context to a central location to allow rotating and flipping around the center\n  ctx.translate(bBoxWidth / 2, bBoxHeight / 2);\n  ctx.rotate(rotRad);\n  ctx.scale(flip.horizontal ? -1 : 1, flip.vertical ? -1 : 1);\n  ctx.translate(-image.width / 2, -image.height / 2);\n\n  // draw rotated image\n  ctx.drawImage(image, 0, 0);\n  const data = ctx.getImageData(pixelCrop.x, pixelCrop.y, pixelCrop.width, pixelCrop.height);\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height;\n  const centerX = pixelCrop.width / 2;\n  const centerY = pixelCrop.height / 2;\n  const radius = Math.min(pixelCrop.width, pixelCrop.height) / 2;\n  if (outputFormat === 'image/jpeg') {\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n  }\n  ctx.beginPath();\n  ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n  ctx.closePath();\n  ctx.clip();\n  const tempCanvas = document.createElement('canvas');\n  tempCanvas.width = pixelCrop.width;\n  tempCanvas.height = pixelCrop.height;\n  const tempCtx = tempCanvas.getContext('2d');\n  if (!tempCtx) {\n    console.error('Failed to get 2D context from temporary canvas');\n    return null;\n  }\n  tempCtx.putImageData(data, 0, 0);\n  ctx.drawImage(tempCanvas, 0, 0, pixelCrop.width, pixelCrop.height);\n  return new Promise((resolve, reject) => {\n    canvas.toBlob(file => {\n      if (file) {\n        resolve(URL.createObjectURL(file));\n      } else {\n        reject(new Error('Canvas is empty after attempting to draw cropped image.'));\n      }\n    }, outputFormat, outputQuality);\n  });\n}\nexport function getRadianAngle(degreeValue) {\n  return degreeValue * Math.PI / 180;\n}\nexport function rotateSize(width, height, rotation) {\n  const rotRad = getRadianAngle(rotation);\n  return {\n    width: Math.abs(Math.cos(rotRad) * width) + Math.abs(Math.sin(rotRad) * height),\n    height: Math.abs(Math.sin(rotRad) * width) + Math.abs(Math.cos(rotRad) * height)\n  };\n}","map":{"version":3,"names":["createImage","url","Promise","resolve","reject","image","Image","addEventListener","error","setAttribute","src","getCroppedImg","imageSrc","pixelCrop","rotation","flip","horizontal","vertical","outputFormat","outputQuality","canvas","document","createElement","ctx","getContext","rotRad","getRadianAngle","width","bBoxWidth","height","bBoxHeight","rotateSize","translate","rotate","scale","drawImage","data","getImageData","x","y","centerX","centerY","radius","Math","min","fillStyle","fillRect","beginPath","arc","PI","closePath","clip","tempCanvas","tempCtx","console","putImageData","toBlob","file","URL","createObjectURL","Error","degreeValue","abs","cos","sin"],"sources":["D:/oosa/oosa_crop_demo/src/cropImage.js"],"sourcesContent":["export const createImage = (url) =>\r\n  new Promise((resolve, reject) => {\r\n    const image = new Image();\r\n    image.addEventListener('load', () => resolve(image));\r\n    image.addEventListener('error', (error) => reject(error));\r\n    image.setAttribute('crossOrigin', 'anonymous'); // needed to avoid cross-origin issues\r\n    image.src = url;\r\n  });\r\n\r\nexport default async function getCroppedImg(\r\n  imageSrc,\r\n  pixelCrop,\r\n  rotation = 0,\r\n  flip = { horizontal: false, vertical: false },\r\n  outputFormat = 'image/png',\r\n  outputQuality = 0.92\r\n) {\r\n  const image = await createImage(imageSrc);\r\n  const canvas = document.createElement('canvas');\r\n  const ctx = canvas.getContext('2d');\r\n\r\n  if (!ctx) {\r\n    return null;\r\n  }\r\n\r\n  const rotRad = getRadianAngle(rotation);\r\n\r\n  // calculate bounding box of the rotated image\r\n  const { width: bBoxWidth, height: bBoxHeight } = rotateSize(\r\n    image.width,\r\n    image.height,\r\n    rotation\r\n  );\r\n\r\n  // set canvas size to match the bounding box\r\n  canvas.width = bBoxWidth;\r\n  canvas.height = bBoxHeight;\r\n\r\n  // translate canvas context to a central location to allow rotating and flipping around the center\r\n  ctx.translate(bBoxWidth / 2, bBoxHeight / 2);\r\n  ctx.rotate(rotRad);\r\n  ctx.scale(flip.horizontal ? -1 : 1, flip.vertical ? -1 : 1);\r\n  ctx.translate(-image.width / 2, -image.height / 2);\r\n\r\n  // draw rotated image\r\n  ctx.drawImage(image, 0, 0);\r\n\r\n  const data = ctx.getImageData(\r\n    pixelCrop.x,\r\n    pixelCrop.y,\r\n    pixelCrop.width,\r\n    pixelCrop.height\r\n  );\r\n\r\n  canvas.width = pixelCrop.width;\r\n  canvas.height = pixelCrop.height;\r\n\r\n  const centerX = pixelCrop.width / 2;\r\n  const centerY = pixelCrop.height / 2;\r\n  const radius = Math.min(pixelCrop.width, pixelCrop.height) / 2;\r\n\r\n  if (outputFormat === 'image/jpeg') {\r\n    ctx.fillStyle = 'white';\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n  }\r\n\r\n  ctx.beginPath();\r\n  ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n  ctx.closePath();\r\n  ctx.clip();\r\n\r\n  const tempCanvas = document.createElement('canvas');\r\n  tempCanvas.width = pixelCrop.width;\r\n  tempCanvas.height = pixelCrop.height;\r\n  const tempCtx = tempCanvas.getContext('2d');\r\n  if (!tempCtx) {\r\n    console.error('Failed to get 2D context from temporary canvas');\r\n    return null;\r\n  }\r\n  tempCtx.putImageData(data, 0, 0);\r\n  \r\n  ctx.drawImage(tempCanvas, 0, 0, pixelCrop.width, pixelCrop.height);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    canvas.toBlob(\r\n      (file) => {\r\n        if (file) {\r\n          resolve(URL.createObjectURL(file));\r\n        }\r\n        else {\r\n          reject(new Error('Canvas is empty after attempting to draw cropped image.'));\r\n        }\r\n      },\r\n      outputFormat,\r\n      outputQuality\r\n    );\r\n  });\r\n}\r\n\r\nexport function getRadianAngle(degreeValue) {\r\n  return (degreeValue * Math.PI) / 180;\r\n}\r\n\r\nexport function rotateSize(width, height, rotation) {\r\n  const rotRad = getRadianAngle(rotation);\r\n  return {\r\n    width:\r\n      Math.abs(Math.cos(rotRad) * width) + Math.abs(Math.sin(rotRad) * height),\r\n    height:\r\n      Math.abs(Math.sin(rotRad) * width) + Math.abs(Math.cos(rotRad) * height),\r\n  };\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}